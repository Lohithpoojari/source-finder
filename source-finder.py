import math
import time
import random
import logging

def generate_random_source_vector():
    """This function will generate a 20*20 dim source vector"""
    return [random.random() for _ in range(20)]

def apply_function_step(source_vector, int_matrix):
    """Applies the Function Step to the source vector using the interaction matrix."""

    temp_vector = [0] * 20
    for i in range(20):
        for j in range(20):
            temp_vector[i] += source_vector[j] * int_matrix[i][j]
    return [math.sin(value) for value in temp_vector]


def find_closest_source(target_value, interaction_matrix, num_iterations, time_limit):
    """ Using Monte Carlo Optiimization to calculate closest value to the target value  """
    min_difference = 9999
    closest_vector = None
    best_original_source = None
    start_time = time.time()

    while time.time() < start_time + time_limit:

        source_vector = generate_random_source_vector()
        original_source = source_vector.copy()

        for _ in range(num_iterations):
            source_vector = apply_function_step(source_vector, interaction_matrix)

        difference = abs(source_vector[0] - target_value)
        if difference < min_difference:
            min_difference = difference
            closest_vector = source_vector
            best_original_source = original_source

    return target_value, closest_vector[0], min_difference, best_original_source


#Logging configurations
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


if __name__ == "__main__":
    try:

        # Configuration #TODO: Configure the value from secrets or env values of K8  
        target_value = 0.7
        time_limit = 0.1
        num_iterations = 5  

        
        raw_data = "+0.40108328-0.95688442-0.22766023-0.52494308+0.71353993+0.00120141+0.69813159-0.28392207-0.63039061+0.76919896+0.20532579-0.05611825-0.65630140+0.91995636-0.69379930+0.88230100-0.54412000-0.52095442-0.25111874+0.75410474-0.46684558+0.37180294-0.21428954+0.45642719-0.06442215+0.83019634-0.35982926-0.39749470+0.57957606+0.01909025+0.64626228-0.90580401-0.52232289-0.52533213+0.35146210+0.48594667-0.18115026+0.54217584-0.73812935-0.38242274+0.65042636-0.61158074+0.41613697-0.40344251+0.85821818+0.27554331-0.87909604+0.63565681+0.25763229+0.34636040+0.85372272+0.38327198+0.97665247+0.47395442-0.36368086-0.32950276+0.94847057+0.59337683+0.97174834-0.54621600+0.67349446+0.71871749+0.74165720+0.80048123+0.65219695-0.82896415+0.59481936+0.57439494-0.25468312+0.08090568+0.37791114+0.01903582+0.29180695+0.85982548-0.86846285+0.03196186+0.72086953-0.82981386+0.68593909-0.44196191-0.87342970+0.30655416-0.35788197-0.91865131-0.63264605+0.48697580+0.40336951-0.53272726-0.99682935+0.10244831-0.96227499-0.10864835+0.94459582+0.15529632+0.00958677-0.45075493-0.65499972-0.50843332+0.63053136+0.26153685-0.91367747+0.37165716-0.72302685+0.31564316+0.98600703+0.07852273+0.71317823+0.42303870+0.89728032+0.49650816+0.23837279-0.63117738+0.33369252+0.84408864+0.92478676-0.51684347-0.06360492-0.35557214-0.12981000+0.11091670-0.98299206-0.99023996-0.59406408-0.56716245-0.66440264+0.35972041-0.04062206+0.74564886+0.65756097+0.85986468+0.15499102+0.74161987-0.41705232-0.10340763+0.51674154-0.09391306+0.13262113+0.19752333-0.74887563-0.51357399-0.03683900-0.22146911-0.69539908-0.82559450+0.05842059-0.95186169+0.83913823+0.35049643+0.27648819-0.38391803-0.75062336+0.18592066-0.78632640+0.01723500-0.07339937+0.09404537+0.70954552+0.16271453-0.71301886-0.92923226+0.29600152+0.07411285+0.39529264-0.59867179+0.51955358+0.33432590+0.07685529+0.20187782-0.04126473+0.52372769-0.90958543+0.24108437-0.65531780+0.42180060-0.71019774-0.88747876+0.61088982-0.63467253+0.16339328+0.15193517+0.02343231+0.57121203-0.46992214-0.09590827-0.17762501+0.95986331-0.53168635-0.87581436+0.75865823+0.19941927+0.86660228-0.65304759+0.94275903-0.90329217-0.54495393+0.22391607+0.76653594-0.66335699+0.54777638-0.15387286+0.42627520+0.46394451-0.09738115-0.42153699+0.84404392-0.16135740-0.34173418-0.88667418+0.59608360-0.08190678+0.50306652-0.03116552-0.13181864-0.23637363-0.08043705-0.45313165+0.78449690+0.93395573-0.40312043+0.39739675+0.85375417+0.42624257+0.04899324+0.30045740-0.29752064-0.32736708+0.47488663-0.22814590-0.43689958-0.57096812-0.07263563-0.22719990+0.56629756-0.19040668+0.71536120+0.69401887-0.85168865-0.71774012-0.14866644-0.50730094-0.16596767+0.28774966+0.73795425+0.10914945+0.74404116+0.88288756-0.82065750+0.84720305-0.25541482+0.48130406-0.03733213-0.54531540-0.11209359-0.95454010-0.76494798-0.91879426+0.26025154+0.42272491-0.03553870-0.50312170+0.28803525+0.67304202-0.60914904-0.06507495+0.11966105-0.51112428+0.01486369-0.77241265-0.81088944+0.41142770+0.41388901-0.93864946-0.28298916-0.25699970-0.91367618-0.87625871-0.76840048+0.64682050-0.52043116-0.13791180+0.92865680-0.33327242+0.27675133+0.95812772+0.45664131+0.08896931+0.53118775-0.06117318+0.01915563+0.76534341-0.98997151+0.85216706+0.97117751-0.32209524+0.61730132-0.39806046-0.98831879+0.50422591+0.97209463-0.08607166-0.88919589-0.11755127+0.81786627+0.37299460-0.13809969+0.17291858-0.28582816+0.35928312-0.57591434+0.79179000-0.47849732-0.97558317-0.08328499-0.08680924-0.59762065+0.76711408-0.55551544+0.58438754-0.75587641-0.71819424+0.01003279+0.32551116+0.10259045+0.51122331-0.19679159+0.28860183-0.26039318-0.77285577-0.36215641-0.38710127+0.61348475-0.40508375+0.30915096+0.58927149+0.10120663+0.78181189-0.72978759+0.66575797+0.22745346+0.62646527-0.92268078+0.02232731-0.23444171-0.91491503+0.61188713+0.99906682+0.10634515+0.66672104+0.61389720-0.42014038+0.31338512-0.30395091-0.17578415-0.21141884-0.51350197-0.27603852-0.32621531-0.42243704+0.53558701+0.51026044+0.31269605-0.37105928+0.24152468-0.78172368-0.64002867-0.77391761+0.72789036+0.63388339+0.23150366-0.58751815-0.05273402+0.06482997+0.15901927+0.52514466+0.52059450+0.22828968+0.84323132+0.22204415-0.38310641-0.19888362+0.95886789-0.39903732+0.89523307+0.21434587+0.03103162-0.15861909+0.74868317-0.97054613-0.20502564-0.55462921+0.55687840+0.40547316-0.41052527-0.26514039-0.96755793+0.30502427+0.92029889+0.69983512-0.63920012+0.28139525"
        # Process the raw_data string to create the interaction matrix
        matrix = [[float(raw_data[i:i+11]) for i in range(0, 4400, 11)][j:j+20] for j in range(0, 400, 20)]

        target, closest_value, min_diff, original_source = find_closest_source(
            target_value, matrix, num_iterations, time_limit
        )

        # Logging the results
        logging.info(f"Target Value: {target}")
        logging.info(f"Closest Vector First Element: {closest_value}")
        logging.info(f"Minimum Difference: {min_diff}")
        logging.info(f"Original Source Vector: {original_source}")
 

    except Exception as e:
        logging.exception(f"An error occurred: {e}")

